package service

import (
	"fmt"
	"github.com/gammazero/workerpool"
	"github.com/schollz/progressbar/v3"
	"github.com/sirupsen/logrus"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sudoku-golang/internal/infra/configs"
)

var env configs.Configs

type Composer struct {
	ComposeFiles          []string
	ForceRebuild          bool
	EnvVars               []string
	progressBar           *progressbar.ProgressBar
	projectName           string
	cmd                   *exec.Cmd
	wp                    *workerpool.WorkerPool
	dockerComposeTemplate string
}

func NewComposer(forceRebuild bool, envVars []string) *Composer {
	var env, err = configs.InitConfigs()

	if err != nil {
		logrus.Infoln(err)
	}

	logrus.Infoln(env)
	c := &Composer{
		ForceRebuild: forceRebuild,
		EnvVars:      envVars,
		wp:           workerpool.New(5),
	}
	c.setDockerComposeTemplate()
	c.FindComposeFiles()
	return c
}

func (c *Composer) FindComposeFiles() {
	var files []string
	globPatterns := []string{"compose.yaml", "*/compose-sudoku.yaml"}

	for _, pattern := range globPatterns {
		matches, err := filepath.Glob(pattern)
		if err != nil {
			logrus.WithError(err).Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤")
		}
		for _, match := range matches {
			if !strings.Contains(match, "_noscan") {
				absPath, err := filepath.Abs(match)
				if err != nil {
					logrus.WithError(err).Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞")
				}
				files = append(files, absPath)
			}
		}
	}

	c.ComposeFiles = files
}

func (c *Composer) Build() {
	logrus.Infoln("–°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

	c.setProgressBar(len(c.ComposeFiles))
	for _, composeFile := range c.ComposeFiles {
		c.setProjectName(composeFile)

		buildCmd := "build"

		if c.ForceRebuild {
			buildCmd = "build --no-cache"
		}

		execCmd := fmt.Sprintf(c.dockerComposeTemplate+" %s", composeFile, buildCmd)

		c.setCommand(execCmd)

		if err := c.cmd.Run(); err != nil {
			fields := c.setLogFields(composeFile, execCmd)

			logrus.WithError(err).WithFields(fields).Fatal("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏")
		} else {
			c.addProgress(1, "–°–±–æ—Ä–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
		}
	}
}

func (c *Composer) Start() {
	logrus.Infoln("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

	c.setProgressBar(len(c.ComposeFiles))
	for _, composeFile := range c.ComposeFiles {
		c.setProjectName(composeFile)

		execCmd := fmt.Sprintf(c.dockerComposeTemplate+" up -d", composeFile)

		c.setCommand(execCmd)

		if err := c.cmd.Run(); err != nil {
			fields := c.setLogFields(composeFile, execCmd)

			logrus.WithError(err).WithFields(fields).Fatal("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞")
		} else {
			c.addProgress(1, "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
		}
	}
}

func (c *Composer) Stop() {
	logrus.Infoln("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

	c.setProgressBar(len(c.ComposeFiles))
	for _, composeFile := range c.ComposeFiles {
		c.wp.Submit(func() {
			c.setProjectName(composeFile)

			execCmd := fmt.Sprintf(c.dockerComposeTemplate+" stop", composeFile)

			c.setCommand(execCmd)

			if err := c.cmd.Run(); err != nil {
				fields := c.setLogFields(composeFile, execCmd)

				logrus.WithError(err).WithFields(fields).Fatal("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
			} else {
				c.addProgress(1, "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
			}
		})
	}

	c.wp.StopWait()
}

func (c *Composer) Down() {
	logrus.Infoln("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

	c.setProgressBar(len(c.ComposeFiles))
	for _, composeFile := range c.ComposeFiles {
		c.wp.Submit(func() {
			c.setProjectName(composeFile)

			execCmd := fmt.Sprintf(c.dockerComposeTemplate+" down", composeFile)

			c.setCommand(execCmd)

			if err := c.cmd.Run(); err != nil {
				fields := c.setLogFields(composeFile, execCmd)

				logrus.WithError(err).WithFields(fields).Fatal("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è")
			} else {
				c.addProgress(1, "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã")
			}
		})
	}

	c.wp.StopWait()
}

func (c *Composer) setCommand(execCmd string) {
	cmd := exec.Command("bash", "-c", execCmd)
	cmd.Env = append(cmd.Env, c.EnvVars...)
	c.cmd = cmd
}

func (c *Composer) setProjectName(composeFile string) {
	c.projectName = filepath.Base(filepath.Dir(composeFile))
}

func (c *Composer) setLogFields(composeFile string, execCmd string) map[string]interface{} {
	return map[string]interface{}{
		"composeFile": composeFile,
		"execCmd":     execCmd,
	}
}

func (c *Composer) setProgressBar(countFiles int) {
	c.progressBar = progressbar.NewOptions(countFiles,
		progressbar.OptionEnableColorCodes(true),
		progressbar.OptionSetRenderBlankState(true),
		progressbar.OptionSetWidth(15),
		progressbar.OptionSetDescription("[cyan]–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...[reset]"),
		progressbar.OptionSetTheme(progressbar.Theme{
			Saucer:        "[green]ìÇÉìÇÉìÇÉ[reset]",
			SaucerHead:    "[yellow]ìÇÉüå´üèéìÇÉ[reset]",
			SaucerPadding: " ",
			BarStart:      "üö¶",
			BarEnd:        "üèÅ",
		}),
		progressbar.OptionOnCompletion(func() {
			fprint, err := fmt.Fprint(os.Stderr, "\n")
			if err != nil {
				logrus.Fatalln("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", fprint)
			}
		}),
	)
}

func (c *Composer) addProgress(step int, finishMessage string) {
	err := c.progressBar.Add(step)

	if c.progressBar.IsFinished() {
		logrus.Infoln(finishMessage)
	}

	if err != nil {
		logrus.Errorln("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
		os.Exit(1)
	}
}

func (c *Composer) setDockerComposeTemplate() {
	c.dockerComposeTemplate = env.ConfigDockerPaths.DockerComposePath + " -f %s"
}
